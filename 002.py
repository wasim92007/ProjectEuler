## Even Fibonacci numbers
##
## Each new term in the Fibonacci sequence is generated by adding the previous two terms.
## By starting with 1 and 2, the first 10 terms will be:
## 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
##
## By considering the terms in the Fibonacci sequence whose values do not exceed four
## million, find the sum of the even-valued terms.

## Strategy:
## The strategy that we are implementing here is to generate the entire Fibonacci sequence
## and then take the sum of all the even terms.
## We are using a list type data struscture to generate the sequence. Using the indexing
## and append function of the list type data structure.
## We are also using modulo(%) operator to check for divisibily by 2.

def main():
    # Declaring the max Fibonacci term limit equal to four million
    fib_max_limit = 4000000
    # Declaring first two term of the Fibonacci series
    fib_seq = [1,2]
    # Declaring and initializing the next term of the Fibonacci series
    fib_next = 0
    # Declaring and initializing the sum of the all even term of the Fibonacci series
    fib_even_sum = 0

    # Using while loop to generate the Fibonacci sequence
    # The while loop will terminate once the Fibonacci series last term is greater than
    # four million
    while fib_seq[-1] < fib_max_limit:
        # As initially we have two terms and the first term is not even we can start
        # summing from the last term which initially is 2. Also we need to restrict
        # the condition where last term might be greater than four million.
        if fib_seq[-1]%2 == 0 and fib_seq[-1] < fib_max_limit:
            # Accumulating the sum
            fib_even_sum += fib_seq[-1]
        # Generating next term of the Fibonacci series
        fib_next = fib_seq[-1] + fib_seq[-2]
        # Appending it to the Fibonacci sequence list
        fib_seq.append(fib_next)

    # Printing the sum at the end
    print(fib_even_sum)

main()
